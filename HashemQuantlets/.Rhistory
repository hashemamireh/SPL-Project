postKarma = numeric(),
commentKarma = numeric(),
isEmployee = logical(),
isMod = logical(),
goldMember = logical(),
verifiedEmail = logical(),
hasSubscribed = logical())
if(progressBar == TRUE)progBar <- txtProgressBar(min = 0, max = length(userList), style = 3)
j <- 1
for(i in userList){
JSONlink <- paste0("https://www.reddit.com/user/", i, "/about.json")
JSONraw <- tryCatch(fromJSON(readLines(JSONlink, warn = FALSE)), error = function(e) NULL)
if(is.null(JSONraw)){message("Unable to retrieve, skipping...")
next
} else{
JSONclean <- JSONraw[[2]]
retrievedUsers <- retrieveSingleUser(i)
userData <- rbind(userData, retrievedUsers)
}
j <- j + 1
if(progressBar == TRUE)setTxtProgressBar(progBar,j)
}
if(progressBar == TRUE)close(progBar)
return(userData)
#end of function
}
retrieveUserData("hashemamireh")
retrieveUserData(userList)
userList
retrieveUserData <- function(
userList, makeUnique = TRUE, progressBar = TRUE){
if(makeUnique == TRUE)userList <- unique(userList)
userData <- data.frame(
userName = character(),
userSince = as.POSIXct(character()),
postKarma = numeric(),
commentKarma = numeric(),
isEmployee = logical(),
isMod = logical(),
goldMember = logical(),
verifiedEmail = logical(),
hasSubscribed = logical())
if(progressBar == TRUE)progBar <- txtProgressBar(min = 0, max = length(userList), style = 3)
j <- 1
for(i in userList){
JSONlink <- paste0("https://www.reddit.com/user/", i, "/about.json")
JSONraw <- tryCatch(fromJSON(readLines(JSONlink, warn = FALSE)), error = function(e) NULL)
if(is.null(JSONraw)){message("Unable to retrieve, skipping...")
next
} else{
JSONclean <- JSONraw[[2]]
retrievedUsers <- retrieveSingleUser()
userData <- rbind(userData, retrievedUsers)
}
j <- j + 1
if(progressBar == TRUE)setTxtProgressBar(progBar,j)
}
if(progressBar == TRUE)close(progBar)
return(userData)
#end of function
}
retrieveUserData(userList)
retrieveSingleUser <- function(){
retrievedUser <- data.frame(
userName = as.character(JSONclean$name),
userSince = as.POSIXct(JSONclean$created_utc, origin="1970-01-01", tz = "UTC"),
postKarma = as.numeric(JSONclean$link_karma),
commentKarma = as.numeric(JSONclean$comment_karma),
isEmployee = as.logical(JSONclean$is_employee),
isMod = as.logical(JSONclean$is_mod),
goldMember = as.logical(JSONclean$is_gold),
verifiedEmail = as.logical(JSONclean$has_verified_email),
hasSubscribed = as.logical(JSONclean$has_subscribed))
return(retrievedUser)
}
retrieveUserData(userList)
retrieveUserData <- function(
userList, makeUnique = TRUE, progressBar = TRUE){
if(makeUnique == TRUE)userList <- unique(userList)
userData <- data.frame(
userName = character(),
userSince = as.POSIXct(character()),
postKarma = numeric(),
commentKarma = numeric(),
isEmployee = logical(),
isMod = logical(),
goldMember = logical(),
verifiedEmail = logical(),
hasSubscribed = logical())
if(progressBar == TRUE)progBar <- txtProgressBar(min = 0, max = length(userList), style = 3)
j <- 1
for(i in userList){
JSONlink <- paste0("https://www.reddit.com/user/", i, "/about.json")
JSONraw <- tryCatch(fromJSON(readLines(JSONlink, warn = FALSE)), error = function(e) NULL)
if(is.null(JSONraw)){message("Unable to retrieve, skipping...")
next
} else{
JSONclean <- JSONraw[[2]]
print(i)
retrievedUsers <- retrieveSingleUser()
userData <- rbind(userData, retrievedUsers)
}
j <- j + 1
if(progressBar == TRUE)setTxtProgressBar(progBar,j)
}
if(progressBar == TRUE)close(progBar)
return(userData)
#end of function
}
retrieveUserData(userList)
userList, makeUnique = TRUE, progressBar = TRUE){
if(makeUnique == TRUE)userList <- unique(userList)
userData <- data.frame(
userName = character(),
userSince = as.POSIXct(character()),
postKarma = numeric(),
commentKarma = numeric(),
isEmployee = logical(),
isMod = logical(),
goldMember = logical(),
verifiedEmail = logical(),
hasSubscribed = logical())
if(progressBar == TRUE)progBar <- txtProgressBar(min = 0, max = length(userList), style = 3)
j <- 1
for(i in userList){
JSONlink <- paste0("https://www.reddit.com/user/", i, "/about.json")
JSONraw <- tryCatch(fromJSON(readLines(JSONlink, warn = FALSE)), error = function(e) NULL)
if(is.null(JSONraw)){message("Unable to retrieve, skipping...")
next
} else{
JSONclean <- JSONraw[[2]]
print(i)
retrievedUsers <- retrieveSingleUser()
userData <- rbind(userData, retrievedUsers)
}
if(progressBar == TRUE)setTxtProgressBar(progBar,j)
j <- j + 1
}
if(progressBar == TRUE)close(progBar)
return(userData)
#end of function
}
retrieveUserData <- function(
userList, makeUnique = TRUE, progressBar = TRUE){
if(makeUnique == TRUE)userList <- unique(userList)
userData <- data.frame(
userName = character(),
userSince = as.POSIXct(character()),
postKarma = numeric(),
commentKarma = numeric(),
isEmployee = logical(),
isMod = logical(),
goldMember = logical(),
verifiedEmail = logical(),
hasSubscribed = logical())
if(progressBar == TRUE)progBar <- txtProgressBar(min = 0, max = length(userList), style = 3)
j <- 1
for(i in userList){
JSONlink <- paste0("https://www.reddit.com/user/", i, "/about.json")
JSONraw <- tryCatch(fromJSON(readLines(JSONlink, warn = FALSE)), error = function(e) NULL)
if(is.null(JSONraw)){message("Unable to retrieve, skipping...")
next
} else{
JSONclean <- JSONraw[[2]]
print(i)
retrievedUsers <- retrieveSingleUser()
userData <- rbind(userData, retrievedUsers)
}
if(progressBar == TRUE)setTxtProgressBar(progBar,j)
j <- j + 1
}
if(progressBar == TRUE)close(progBar)
return(userData)
#end of function
}
retrieveUserData(userList)
retrieveSingleUser()
i <- NULL
retrieveUserData <- function(
userList, makeUnique = TRUE, progressBar = TRUE){
if(makeUnique == TRUE)userList <- unique(userList)
userData <- data.frame(
userName = character(),
userSince = as.POSIXct(character()),
postKarma = numeric(),
commentKarma = numeric(),
isEmployee = logical(),
isMod = logical(),
goldMember = logical(),
verifiedEmail = logical(),
hasSubscribed = logical())
if(progressBar == TRUE)progBar <- txtProgressBar(min = 0, max = length(userList), style = 3)
j <- 1
for(i in userList){
JSONlink <- paste0("https://www.reddit.com/user/", i, "/about.json")
JSONraw <- tryCatch(fromJSON(readLines(JSONlink, warn = FALSE)), error = function(e) NULL)
if(is.null(JSONraw)){message("Unable to retrieve, skipping...")
next
} else{
JSONclean <- JSONraw[[2]]
print(i)
retrievedUsers <- retrieveSingleUser()
userData <- rbind(userData, retrievedUsers)
}
if(progressBar == TRUE)setTxtProgressBar(progBar,j)
j <- j + 1
}
if(progressBar == TRUE)close(progBar)
return(userData)
#end of function
}
retrieveSingleUser <- function(){
retrievedUser <- data.frame(
userName = as.character(JSONclean$name),
userSince = as.POSIXct(JSONclean$created_utc, origin="1970-01-01", tz = "UTC"),
postKarma = as.numeric(JSONclean$link_karma),
commentKarma = as.numeric(JSONclean$comment_karma),
isEmployee = as.logical(JSONclean$is_employee),
isMod = as.logical(JSONclean$is_mod),
goldMember = as.logical(JSONclean$is_gold),
verifiedEmail = as.logical(JSONclean$has_verified_email),
hasSubscribed = as.logical(JSONclean$has_subscribed))
return(retrievedUser)
}
retrieveSingleUser()
retrieveUserData(userList)
retrieveUserData <- function(
userList, makeUnique = TRUE, progressBar = TRUE){
if(makeUnique == TRUE)userList <- unique(userList)
userData <- data.frame(
userName = character(),
userSince = as.POSIXct(character()),
postKarma = numeric(),
commentKarma = numeric(),
isEmployee = logical(),
isMod = logical(),
goldMember = logical(),
verifiedEmail = logical(),
hasSubscribed = logical())
if(progressBar == TRUE)progBar <- txtProgressBar(min = 0, max = length(userList), style = 3)
j <- 1
for(i in userList){
JSONlink <- paste0("https://www.reddit.com/user/", i, "/about.json")
JSONraw <- tryCatch(fromJSON(readLines(JSONlink, warn = FALSE)), error = function(e) NULL)
if(is.null(JSONraw)){message("Unable to retrieve, skipping...")
next
} else{
JSONclean <- JSONraw[[2]]
print(i)
retrievedUsers <- retrieveSingleUser(JSONclean)
userData <- rbind(userData, retrievedUsers)
}
if(progressBar == TRUE)setTxtProgressBar(progBar,j)
j <- j + 1
#end of loop
}
if(progressBar == TRUE)close(progBar)
return(userData)
#end of function
}
retrieveSingleUser <- function(JSONclean){
retrievedUser <- data.frame(
userName = as.character(JSONclean$name),
userSince = as.POSIXct(JSONclean$created_utc, origin="1970-01-01", tz = "UTC"),
postKarma = as.numeric(JSONclean$link_karma),
commentKarma = as.numeric(JSONclean$comment_karma),
isEmployee = as.logical(JSONclean$is_employee),
isMod = as.logical(JSONclean$is_mod),
goldMember = as.logical(JSONclean$is_gold),
verifiedEmail = as.logical(JSONclean$has_verified_email),
hasSubscribed = as.logical(JSONclean$has_subscribed))
return(retrievedUser)
}
retrieveUserData(userList)
userList, makeUnique = TRUE, progressBar = TRUE){
if(makeUnique == TRUE)userList <- unique(userList)
userData <- data.frame(
userName = character(),
userSince = as.POSIXct(character()),
postKarma = numeric(),
commentKarma = numeric(),
isEmployee = logical(),
isMod = logical(),
goldMember = logical(),
verifiedEmail = logical(),
hasSubscribed = logical())
if(progressBar == TRUE)progBar <- txtProgressBar(min = 0, max = length(userList), style = 3)
j <- 1
for(i in userList){
JSONlink <- paste0("https://www.reddit.com/user/", i, "/about.json")
JSONraw <- tryCatch(fromJSON(readLines(JSONlink, warn = FALSE)), error = function(e) NULL)
if(is.null(JSONraw)){message("Unable to retrieve, skipping...")
next
} else{
JSONclean <- JSONraw[[2]]
retrievedUsers <- retrieveSingleUser(JSONclean)
userData <- rbind(userData, retrievedUsers)
}
if(progressBar == TRUE)setTxtProgressBar(progBar,j)
j <- j + 1
#end of loop
}
if(progressBar == TRUE)close(progBar)
return(userData)
#end of function
}
retrieveUserData <- function(
userList, makeUnique = TRUE, progressBar = TRUE){
if(makeUnique == TRUE)userList <- unique(userList)
userData <- data.frame(
userName = character(),
userSince = as.POSIXct(character()),
postKarma = numeric(),
commentKarma = numeric(),
isEmployee = logical(),
isMod = logical(),
goldMember = logical(),
verifiedEmail = logical(),
hasSubscribed = logical())
if(progressBar == TRUE)progBar <- txtProgressBar(min = 0, max = length(userList), style = 3)
j <- 1
for(i in userList){
JSONlink <- paste0("https://www.reddit.com/user/", i, "/about.json")
JSONraw <- tryCatch(fromJSON(readLines(JSONlink, warn = FALSE)), error = function(e) NULL)
if(is.null(JSONraw)){message("Unable to retrieve, skipping...")
next
} else{
JSONclean <- JSONraw[[2]]
retrievedUsers <- retrieveSingleUser(JSONclean)
userData <- rbind(userData, retrievedUsers)
}
if(progressBar == TRUE)setTxtProgressBar(progBar,j)
j <- j + 1
#end of loop
}
if(progressBar == TRUE)close(progBar)
return(userData)
#end of function
}
retrieveUserData(userList)
retrieveSingleUser <- function(){
retrievedUser <- data.frame(
userName = as.character(JSONclean$name),
userSince = as.POSIXct(JSONclean$created_utc, origin="1970-01-01", tz = "UTC"),
postKarma = as.numeric(JSONclean$link_karma),
commentKarma = as.numeric(JSONclean$comment_karma),
isEmployee = as.logical(JSONclean$is_employee),
isMod = as.logical(JSONclean$is_mod),
goldMember = as.logical(JSONclean$is_gold),
verifiedEmail = as.logical(JSONclean$has_verified_email),
hasSubscribed = as.logical(JSONclean$has_subscribed))
return(r
}
retrieveSingleUser <- function(){
retrievedUser <- data.frame(
userName = as.character(JSONclean$name),
userSince = as.POSIXct(JSONclean$created_utc, origin="1970-01-01", tz = "UTC"),
postKarma = as.numeric(JSONclean$link_karma),
commentKarma = as.numeric(JSONclean$comment_karma),
isEmployee = as.logical(JSONclean$is_employee),
isMod = as.logical(JSONclean$is_mod),
goldMember = as.logical(JSONclean$is_gold),
verifiedEmail = as.logical(JSONclean$has_verified_email),
hasSubscribed = as.logical(JSONclean$has_subscribed))
return(retrievedUser)
}
retrieveUserData(userList)
retrieveSingleUser <- function(JSONclean){
retrievedUser <- data.frame(
userName = as.character(JSONclean$name),
userSince = as.POSIXct(JSONclean$created_utc, origin="1970-01-01", tz = "UTC"),
postKarma = as.numeric(JSONclean$link_karma),
commentKarma = as.numeric(JSONclean$comment_karma),
isEmployee = as.logical(JSONclean$is_employee),
isMod = as.logical(JSONclean$is_mod),
goldMember = as.logical(JSONclean$is_gold),
verifiedEmail = as.logical(JSONclean$has_verified_email),
hasSubscribed = as.logical(JSONclean$has_subscribed))
return(retrievedUser)
}
retrieveUserData(userList)
?yaml
install.packages("yamldebugger")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("lborke/yamldebugger")
library(yamldebugger)
?yaml.debugger.run
yaml.debugger.run()
yaml.debugger.init()
?require
require(ggplot2)
require(hashem)
require(TwitteR)
require(twitteR)
help(yaml.debugger.init)
library(yamldebugger)
help(yaml.debugger.init)
for(i in 1:10) c = c * 1.1 + 10000
c <- numeric()
for(i in 1:10) c = c * 1.1 + 10000
c
c <- c * 1.1 + 10000
c
c +100
c <- 0
for(i in 1:10) c <- c * 1.1 + 10000
c
c <- 0
for(i in 1:30) c <- c * 1.1 + 10000
c
c <- 0
for(i in 1:100) c <- c * 1.1 + 10000
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 20000
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 30000
c
for(i in 1:11) c <- c * 1.1 + 50000
c <- 0
for(i in 1:11) c <- c * 1.1 + 50000
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 55000
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53000
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53500
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53600
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53700
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53900
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 54100
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 54050
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 54025
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 54010
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 54005
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 54000
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53950
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53980
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53970
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53670
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53960
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53966
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53963
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53964
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53963.5
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53963.4
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53963.2
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53963.1
c
c <- 0
for(i in 1:11) c <- c * 1.1 + 53963.15
c
library(formatR)
?formatR
setwd("~/")
setwd("~/SPL-Project/HashemQauntlets")
formatR::tidy_file()
?formatR::tidy_file()
formatR::tidy_dir()
formatR::tidy_dir("Trump")
formatR::tidy_dir("Clinton")
formatR::tidy_dir(recursive = TRUE)
load("/home/hashem/HU-Berlin/WS2017-2018/SPL/Project/SubTopComments.RData")
load("/home/hashem/HU-Berlin/WS2017-2018/SPL/Project (copy)/SubTopComments.RData")
